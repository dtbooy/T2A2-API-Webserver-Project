from app import db, bcrypt
from flask import Blueprint, request
from models.user import User, UserSchema
from flask_jwt_extended import create_access_token
from datetime import timedelta

auth = Blueprint("auth", __name__)

# Auth routes
# LOGIN
@auth.route("/login", methods=["POST"])
def auth_login():
    # Load username & password from request.json
    login = UserSchema(only=["username", "password"]).load(request.json)
    # Pull user details from the database
    stmt = db.select(User).filter_by(username=login["username"])
    user = db.session.scalar(stmt)
    # Check username exists & password hash matches
    if not user or not bcrypt.check_password_hash(user.password, login["password"]):
        # return 401 (Unauthorised error) if invalid username / password
        return {"Error": "Username or password invalid"}, 401

    # Create JWT token for user session
    token = create_access_token(user.id, expires_delta=timedelta(hours=1))
    return {"Username" : user.username, "Token" : token}, 200

# REGISTER
@auth.route("/register", methods=["POST"])
def auth_register():
    # Load user details from request.json. exclude: 
    # id (autogenerated), 
    # is_admin (can only be set by existing admin)
    user_info = UserSchema(only=["username", "password", "email"]).load(request.json)
    
    # Check adequate password length -------------------------------------------------------------------------------------------------> DEBUG MARSHMALLOW Shoulod do this automatically
    if len(user_info["password"]) <= 6:
        # return a bad request Status Code 
        return {"Error": "Password must be at least 6 characters"}, 400
    
    # check if user exists
    stmt = db.select(User).where(User.username==user_info["username"])
    user = db.session.scalar(stmt)
    if user:
        return {"Error": "Username exists"}, 400
    
    user =  User(
        username=user_info["username"],
        password=bcrypt.generate_password_hash(user_info["password"]).decode("utf-8"),
        email = user_info.get("email", None)
    )
    # Add new user to db
    db.session.add(user)
    db.session.commit()
    # create a token for the new user 
    token = create_access_token(user.id, expires_delta=timedelta(hours=1))
    return {"ID": user.id, "Username" : user.username, "Email" : user.email, "Token" : token}, 201

# @auth.route("/", methods=["GET"])
# def get_users():
#     stmt = db.select(User)
#     users = db.session.scalars(stmt)
#     return UserSchema(many=True, exclude=["password"]).dump(users)